from flask import Flask, request
import qrcode
from io import BytesIO
import requests
import os

TOKEN = os.environ.get('7611903971:AAGJ9MWOcx7YLcMT3tP8IlauvBp0qrIcw7U')  # –í Render –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_URL = f'https://api.telegram.org/bot7611903971:AAGJ9MWOcx7YLcMT3tP8IlauvBp0qrIcw7U/'

user_data = {}  # user_id: {'step': 'waiting_phone'/'waiting_code', 'phones': [], 'codes': []}

def get_updates(offset=None):
    params = {'timeout': 30, 'offset': offset}
    res = requests.get(API_URL + 'getUpdates', params=params)
    return res.json()

def send_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    requests.post(API_URL + 'sendMessage', data=data)

def send_photo(chat_id, image_bytes, caption=''):
    files = {'photo': ('qr.png', image_bytes)}
    data = {'chat_id': chat_id, 'caption': caption}
    requests.post(API_URL + 'sendPhoto', files=files, data=data)

def send_main_menu(chat_id):
    keyboard = {
        'inline_keyboard': [
            [{'text': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–∞—á–∫–∏', 'callback_data': 'batch_qr'}]
        ]
    }
    send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=json.dumps(keyboard))

def handle_contact(message):
    user_id = message['from']['id']
    phone = message['contact']['phone_number']
    # –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º batch, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    user_data[user_id] = {'step': 'wait_code', 'phones': [phone], 'codes': []}
    send_message(user_id, f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {phone}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.")

def handle_text(message):
    user_id = message['from']['id']
    text = message['text']

    if user_id not in user_data:
        send_main_menu(user_id)
        return

    step = user_data[user_id].get('step')

    if step == 'waiting_phone':
        # –æ–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–∞—á–∫–∏
        if text.startswith('+') and len(text) > 10:
            user_data[user_id]['phones'] = [text]
            user_data[user_id]['step'] = 'waiting_code'
            send_message(user_id, "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–∞—á–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456,654321)")
        else:
            send_message(user_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx")
        return

    if step == 'waiting_code':
        # –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥(—ã)
        codes = [c.strip() for c in text.split(',') if c.strip().isdigit() and len(c.strip()) == 6]
        if not codes:
            send_message(user_id, "‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ 6-–∑–Ω–∞—á–Ω—ã—Ö –∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return
        user_data[user_id]['codes'] = codes

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (–ø—Ä–∏–º–µ—Ä —Å –æ–¥–Ω–∏–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –æ–¥–∏–Ω —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º)
        for code in codes:
            phone = user_data[user_id]['phones'][0]
            qr_text = f"P|{phone}|{code}"
            qr = qrcode.make(qr_text)
            bio = BytesIO()
            qr.save(bio, 'PNG')
            bio.seek(0)
            send_photo(user_id, bio, caption=f"QR –ö–æ–¥ –¥–ª—è: {phone} | –ö–æ–¥: {code}")

        user_data.pop(user_id)
        send_main_menu(user_id)
        return

    if step == 'wait_code':
        # –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if text.isdigit() and len(text) == 6:
            phone = user_data[user_id]['phones'][0]
            qr_text = f"P|{phone}|{text}"

            qr = qrcode.make(qr_text)
            bio = BytesIO()
            qr.save(bio, 'PNG')
            bio.seek(0)

            send_photo(user_id, bio, caption="–í–æ—Ç —Ç–≤–æ–π QR –ö–æ–¥")
            user_data.pop(user_id)
            send_main_menu(user_id)
        else:
            send_message(user_id, "‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä.")
        return

def handle_callback_query(callback):
    user_id = callback['from']['id']
    data = callback['data']

    if data == 'batch_qr':
        user_data[user_id] = {'step': 'waiting_phone', 'phones': [], 'codes': []}
        send_message(user_id, "‚úâÔ∏è –ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–∞—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567)")

import json

def main():
    last_update_id = None
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    while True:
        updates = get_updates(last_update_id)
        for update in updates.get('result', []):
            last_update_id = update['update_id'] + 1

            if 'callback_query' in update:
                handle_callback_query(update['callback_query'])
                continue

            msg = update.get('message')
            if not msg:
                continue

            if 'contact' in msg:
                handle_contact(msg)
            elif 'text' in msg:
                handle_text(msg)

        time.sleep(1)

if __name__ == '__main__':
    main()
